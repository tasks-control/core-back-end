version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: core-back-app
    restart: unless-stopped
    environment:
      DB_USER: ${POSTGRES_USER:-user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      DB_NAME: ${POSTGRES_DB:-core-back-db}
      DB_HOST: postgres
      DB_PORT: 5432
      JWT_SECRET: ${JWT_SECRET:-secret}
    ports:
      - "${APP_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - core-back-network

  postgres:
    image: postgres:16-alpine
    container_name: core-back-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      POSTGRES_DB: ${POSTGRES_DB:-core-back-db}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-core-back-db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - core-back-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: core-back-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - core-back-network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  core-back-network:
    driver: bridge

