// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Board defines model for Board.
type Board struct {
	CreatedAt   *time.Time          `json:"createdAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`

	// IdMemberCreator ID of the board creator
	IdMemberCreator *openapi_types.UUID `json:"idMemberCreator,omitempty"`
	Name            *string             `json:"name,omitempty"`

	// NameBoardUnique Unique identifier name for the board
	NameBoardUnique *string `json:"name_board_unique,omitempty"`

	// Starred Whether the current user has starred this board
	Starred   *bool      `json:"starred,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// BoardSummary defines model for BoardSummary.
type BoardSummary struct {
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`

	// MemberCount Number of members in the board
	MemberCount *int    `json:"memberCount,omitempty"`
	Name        *string `json:"name,omitempty"`

	// NameBoardUnique Unique identifier name for the board
	NameBoardUnique *string    `json:"name_board_unique,omitempty"`
	Starred         *bool      `json:"starred,omitempty"`
	UpdatedAt       *time.Time `json:"updatedAt,omitempty"`
}

// Card defines model for Card.
type Card struct {
	Archived  *bool      `json:"archived,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CreatedBy ID of the member who created the card
	CreatedBy   *openapi_types.UUID `json:"createdBy,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	IdList      *openapi_types.UUID `json:"idList,omitempty"`

	// Position Position for ordering cards within list
	Position  *float32   `json:"position,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// CreateBoardRequest defines model for CreateBoardRequest.
type CreateBoardRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`

	// NameBoardUnique Unique identifier name for the board (lowercase letters, numbers, and hyphens only)
	NameBoardUnique string `json:"name_board_unique"`

	// Password Password required to join the board
	Password string `json:"password"`
}

// CreateCardRequest defines model for CreateCardRequest.
type CreateCardRequest struct {
	Description *string `json:"description,omitempty"`

	// Position Position for ordering (auto-generated if not provided)
	Position *float32 `json:"position,omitempty"`
	Title    string   `json:"title"`
}

// CreateListRequest defines model for CreateListRequest.
type CreateListRequest struct {
	Name string `json:"name"`

	// Position Position for ordering lists
	Position float32 `json:"position"`
}

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error string `json:"error"`

	// StatusCode HTTP status code
	StatusCode int `json:"statusCode"`
}

// JoinBoardRequest defines model for JoinBoardRequest.
type JoinBoardRequest struct {
	// Password Board password
	Password string `json:"password"`
}

// List defines model for List.
type List struct {
	Archived  *bool               `json:"archived,omitempty"`
	CreatedAt *time.Time          `json:"createdAt,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	IdBoard   *openapi_types.UUID `json:"idBoard,omitempty"`
	Name      *string             `json:"name,omitempty"`

	// Position Position for ordering lists
	Position  *float32   `json:"position,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// Member defines model for Member.
type Member struct {
	CreatedAt *time.Time           `json:"createdAt,omitempty"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	FullName  *string              `json:"fullName,omitempty"`
	Id        *openapi_types.UUID  `json:"id,omitempty"`
	UpdatedAt *time.Time           `json:"updatedAt,omitempty"`
	Username  *string              `json:"username,omitempty"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    openapi_types.Email `json:"email"`
	FullName *string             `json:"fullName,omitempty"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// TokenRefreshRequest defines model for TokenRefreshRequest.
type TokenRefreshRequest struct {
	// RefreshToken Valid refresh token
	RefreshToken string `json:"refreshToken"`
}

// UpdateBoardRequest defines model for UpdateBoardRequest.
type UpdateBoardRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`

	// NameBoardUnique Update unique identifier name for the board (lowercase letters, numbers, and hyphens only)
	NameBoardUnique *string `json:"name_board_unique,omitempty"`

	// Password Update board password
	Password *string `json:"password,omitempty"`
}

// UpdateCardRequest defines model for UpdateCardRequest.
type UpdateCardRequest struct {
	// Archived Archive/unarchive the card
	Archived    *bool   `json:"archived,omitempty"`
	Description *string `json:"description,omitempty"`

	// IdList Move card to different list
	IdList *openapi_types.UUID `json:"idList,omitempty"`

	// Position New position for ordering
	Position *float32 `json:"position,omitempty"`
	Title    *string  `json:"title,omitempty"`
}

// UpdateListRequest defines model for UpdateListRequest.
type UpdateListRequest struct {
	// Archived Archive/unarchive the list
	Archived *bool   `json:"archived,omitempty"`
	Name     *string `json:"name,omitempty"`

	// Position New position for ordering
	Position *float32 `json:"position,omitempty"`
}

// UpdateMemberRequest defines model for UpdateMemberRequest.
type UpdateMemberRequest struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	FullName *string              `json:"fullName,omitempty"`

	// Password New password (optional)
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// BoardResponse defines model for BoardResponse.
type BoardResponse = Board

// BoardWithDetailsResponse defines model for BoardWithDetailsResponse.
type BoardWithDetailsResponse struct {
	CreatedAt   *time.Time          `json:"createdAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`

	// IdMemberCreator ID of the board creator
	IdMemberCreator *openapi_types.UUID `json:"idMemberCreator,omitempty"`
	Lists           *[]List             `json:"lists,omitempty"`
	Members         *[]Member           `json:"members,omitempty"`
	Name            *string             `json:"name,omitempty"`

	// NameBoardUnique Unique identifier name for the board
	NameBoardUnique *string `json:"name_board_unique,omitempty"`

	// Starred Whether the current user has starred this board
	Starred   *bool      `json:"starred,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// BoardsListResponse defines model for BoardsListResponse.
type BoardsListResponse struct {
	Boards *[]BoardSummary `json:"boards,omitempty"`
	Limit  *int            `json:"limit,omitempty"`
	Offset *int            `json:"offset,omitempty"`
	Total  *int            `json:"total,omitempty"`
}

// CardResponse defines model for CardResponse.
type CardResponse = Card

// Forbidden defines model for Forbidden.
type Forbidden = Error

// JoinBoardResponse defines model for JoinBoardResponse.
type JoinBoardResponse struct {
	Board *Board `json:"board,omitempty"`
}

// ListResponse defines model for ListResponse.
type ListResponse = List

// ListWithCardsResponse defines model for ListWithCardsResponse.
type ListWithCardsResponse struct {
	Archived  *bool               `json:"archived,omitempty"`
	Cards     *[]Card             `json:"cards,omitempty"`
	CreatedAt *time.Time          `json:"createdAt,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	IdBoard   *openapi_types.UUID `json:"idBoard,omitempty"`
	Name      *string             `json:"name,omitempty"`

	// Position Position for ordering lists
	Position  *float32   `json:"position,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// AccessToken JWT access token
	AccessToken *string `json:"accessToken,omitempty"`

	// ExpiresIn Access token expiration time in seconds
	ExpiresIn *int `json:"expiresIn,omitempty"`

	// RefreshToken JWT refresh token
	RefreshToken *string `json:"refreshToken,omitempty"`
	User         *Member `json:"user,omitempty"`
}

// MemberResponse defines model for MemberResponse.
type MemberResponse = Member

// NotFound defines model for NotFound.
type NotFound = Error

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse = Member

// StarBoardResponse defines model for StarBoardResponse.
type StarBoardResponse struct {
	Message *string `json:"message,omitempty"`
	Starred *bool   `json:"starred,omitempty"`
}

// TokenRefreshResponse defines model for TokenRefreshResponse.
type TokenRefreshResponse struct {
	AccessToken *string `json:"accessToken,omitempty"`
	ExpiresIn   *int    `json:"expiresIn,omitempty"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// UnstarBoardResponse defines model for UnstarBoardResponse.
type UnstarBoardResponse struct {
	Message *string `json:"message,omitempty"`
	Starred *bool   `json:"starred,omitempty"`
}

// GetBoardsParams defines parameters for GetBoards.
type GetBoardsParams struct {
	// Starred Filter by starred boards only
	Starred *bool `form:"starred,omitempty" json:"starred,omitempty"`
	Limit   *int  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset  *int  `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostCardsParams defines parameters for PostCards.
type PostCardsParams struct {
	IdList openapi_types.UUID `form:"idList" json:"idList"`
}

// PostListsParams defines parameters for PostLists.
type PostListsParams struct {
	IdBoard openapi_types.UUID `form:"idBoard" json:"idBoard"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRefreshJSONRequestBody defines body for PostAuthRefresh for application/json ContentType.
type PostAuthRefreshJSONRequestBody = TokenRefreshRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = RegisterRequest

// PostBoardsJSONRequestBody defines body for PostBoards for application/json ContentType.
type PostBoardsJSONRequestBody = CreateBoardRequest

// PutBoardsIdBoardJSONRequestBody defines body for PutBoardsIdBoard for application/json ContentType.
type PutBoardsIdBoardJSONRequestBody = UpdateBoardRequest

// PostCardsJSONRequestBody defines body for PostCards for application/json ContentType.
type PostCardsJSONRequestBody = CreateCardRequest

// PutCardsIdCardJSONRequestBody defines body for PutCardsIdCard for application/json ContentType.
type PutCardsIdCardJSONRequestBody = UpdateCardRequest

// PostListsJSONRequestBody defines body for PostLists for application/json ContentType.
type PostListsJSONRequestBody = CreateListRequest

// PutListsIdListJSONRequestBody defines body for PutListsIdList for application/json ContentType.
type PutListsIdListJSONRequestBody = UpdateListRequest

// PostMembersBoardsNameBoardUniqueJoinJSONRequestBody defines body for PostMembersBoardsNameBoardUniqueJoin for application/json ContentType.
type PostMembersBoardsNameBoardUniqueJoinJSONRequestBody = JoinBoardRequest

// PutMembersMeJSONRequestBody defines body for PutMembersMe for application/json ContentType.
type PutMembersMeJSONRequestBody = UpdateMemberRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthLoginWithBody request with any body
	PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthRefreshWithBody request with any body
	PostAuthRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthRefresh(ctx context.Context, body PostAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthRegisterWithBody request with any body
	PostAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthRegister(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBoards request
	GetBoards(ctx context.Context, params *GetBoardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBoardsWithBody request with any body
	PostBoardsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBoards(ctx context.Context, body PostBoardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBoardsIdBoard request
	DeleteBoardsIdBoard(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBoardsIdBoard request
	GetBoardsIdBoard(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBoardsIdBoardWithBody request with any body
	PutBoardsIdBoardWithBody(ctx context.Context, idBoard openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBoardsIdBoard(ctx context.Context, idBoard openapi_types.UUID, body PutBoardsIdBoardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBoardsIdBoardMembersIdMember request
	DeleteBoardsIdBoardMembersIdMember(ctx context.Context, idBoard openapi_types.UUID, idMember openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardsWithBody request with any body
	PostCardsWithBody(ctx context.Context, params *PostCardsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCards(ctx context.Context, params *PostCardsParams, body PostCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCardsIdCard request
	DeleteCardsIdCard(ctx context.Context, idCard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardsIdCard request
	GetCardsIdCard(ctx context.Context, idCard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCardsIdCardWithBody request with any body
	PutCardsIdCardWithBody(ctx context.Context, idCard openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCardsIdCard(ctx context.Context, idCard openapi_types.UUID, body PutCardsIdCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostListsWithBody request with any body
	PostListsWithBody(ctx context.Context, params *PostListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLists(ctx context.Context, params *PostListsParams, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListsIdList request
	DeleteListsIdList(ctx context.Context, idList openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListsIdList request
	GetListsIdList(ctx context.Context, idList openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutListsIdListWithBody request with any body
	PutListsIdListWithBody(ctx context.Context, idList openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutListsIdList(ctx context.Context, idList openapi_types.UUID, body PutListsIdListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMembersBoardsIdBoardStar request
	DeleteMembersBoardsIdBoardStar(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMembersBoardsIdBoardStar request
	PostMembersBoardsIdBoardStar(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMembersBoardsNameBoardUniqueJoinWithBody request with any body
	PostMembersBoardsNameBoardUniqueJoinWithBody(ctx context.Context, nameBoardUnique string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMembersBoardsNameBoardUniqueJoin(ctx context.Context, nameBoardUnique string, body PostMembersBoardsNameBoardUniqueJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMembersMe request
	GetMembersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMembersMeWithBody request with any body
	PutMembersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMembersMe(ctx context.Context, body PutMembersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRefreshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRefresh(ctx context.Context, body PostAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRefreshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRegister(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBoards(ctx context.Context, params *GetBoardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBoardsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBoardsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBoardsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBoards(ctx context.Context, body PostBoardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBoardsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBoardsIdBoard(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBoardsIdBoardRequest(c.Server, idBoard)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBoardsIdBoard(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBoardsIdBoardRequest(c.Server, idBoard)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBoardsIdBoardWithBody(ctx context.Context, idBoard openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBoardsIdBoardRequestWithBody(c.Server, idBoard, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBoardsIdBoard(ctx context.Context, idBoard openapi_types.UUID, body PutBoardsIdBoardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBoardsIdBoardRequest(c.Server, idBoard, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBoardsIdBoardMembersIdMember(ctx context.Context, idBoard openapi_types.UUID, idMember openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBoardsIdBoardMembersIdMemberRequest(c.Server, idBoard, idMember)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardsWithBody(ctx context.Context, params *PostCardsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCards(ctx context.Context, params *PostCardsParams, body PostCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCardsIdCard(ctx context.Context, idCard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCardsIdCardRequest(c.Server, idCard)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardsIdCard(ctx context.Context, idCard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardsIdCardRequest(c.Server, idCard)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCardsIdCardWithBody(ctx context.Context, idCard openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCardsIdCardRequestWithBody(c.Server, idCard, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCardsIdCard(ctx context.Context, idCard openapi_types.UUID, body PutCardsIdCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCardsIdCardRequest(c.Server, idCard, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostListsWithBody(ctx context.Context, params *PostListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLists(ctx context.Context, params *PostListsParams, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListsIdList(ctx context.Context, idList openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListsIdListRequest(c.Server, idList)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListsIdList(ctx context.Context, idList openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsIdListRequest(c.Server, idList)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutListsIdListWithBody(ctx context.Context, idList openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutListsIdListRequestWithBody(c.Server, idList, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutListsIdList(ctx context.Context, idList openapi_types.UUID, body PutListsIdListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutListsIdListRequest(c.Server, idList, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMembersBoardsIdBoardStar(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMembersBoardsIdBoardStarRequest(c.Server, idBoard)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMembersBoardsIdBoardStar(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMembersBoardsIdBoardStarRequest(c.Server, idBoard)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMembersBoardsNameBoardUniqueJoinWithBody(ctx context.Context, nameBoardUnique string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMembersBoardsNameBoardUniqueJoinRequestWithBody(c.Server, nameBoardUnique, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMembersBoardsNameBoardUniqueJoin(ctx context.Context, nameBoardUnique string, body PostMembersBoardsNameBoardUniqueJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMembersBoardsNameBoardUniqueJoinRequest(c.Server, nameBoardUnique, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMembersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMembersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMembersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMembersMeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMembersMe(ctx context.Context, body PutMembersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMembersMeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthLoginRequest calls the generic PostAuthLogin builder with application/json body
func NewPostAuthLoginRequest(server string, body PostAuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthLoginRequestWithBody generates requests for PostAuthLogin with any type of body
func NewPostAuthLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthRefreshRequest calls the generic PostAuthRefresh builder with application/json body
func NewPostAuthRefreshRequest(server string, body PostAuthRefreshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthRefreshRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthRefreshRequestWithBody generates requests for PostAuthRefresh with any type of body
func NewPostAuthRefreshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthRegisterRequest calls the generic PostAuthRegister builder with application/json body
func NewPostAuthRegisterRequest(server string, body PostAuthRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthRegisterRequestWithBody generates requests for PostAuthRegister with any type of body
func NewPostAuthRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBoardsRequest generates requests for GetBoards
func NewGetBoardsRequest(server string, params *GetBoardsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Starred != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "starred", runtime.ParamLocationQuery, *params.Starred); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBoardsRequest calls the generic PostBoards builder with application/json body
func NewPostBoardsRequest(server string, body PostBoardsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBoardsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBoardsRequestWithBody generates requests for PostBoards with any type of body
func NewPostBoardsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBoardsIdBoardRequest generates requests for DeleteBoardsIdBoard
func NewDeleteBoardsIdBoardRequest(server string, idBoard openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idBoard", runtime.ParamLocationPath, idBoard)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBoardsIdBoardRequest generates requests for GetBoardsIdBoard
func NewGetBoardsIdBoardRequest(server string, idBoard openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idBoard", runtime.ParamLocationPath, idBoard)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBoardsIdBoardRequest calls the generic PutBoardsIdBoard builder with application/json body
func NewPutBoardsIdBoardRequest(server string, idBoard openapi_types.UUID, body PutBoardsIdBoardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBoardsIdBoardRequestWithBody(server, idBoard, "application/json", bodyReader)
}

// NewPutBoardsIdBoardRequestWithBody generates requests for PutBoardsIdBoard with any type of body
func NewPutBoardsIdBoardRequestWithBody(server string, idBoard openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idBoard", runtime.ParamLocationPath, idBoard)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBoardsIdBoardMembersIdMemberRequest generates requests for DeleteBoardsIdBoardMembersIdMember
func NewDeleteBoardsIdBoardMembersIdMemberRequest(server string, idBoard openapi_types.UUID, idMember openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idBoard", runtime.ParamLocationPath, idBoard)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "idMember", runtime.ParamLocationPath, idMember)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boards/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCardsRequest calls the generic PostCards builder with application/json body
func NewPostCardsRequest(server string, params *PostCardsParams, body PostCardsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCardsRequestWithBody generates requests for PostCards with any type of body
func NewPostCardsRequestWithBody(server string, params *PostCardsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idList", runtime.ParamLocationQuery, params.IdList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCardsIdCardRequest generates requests for DeleteCardsIdCard
func NewDeleteCardsIdCardRequest(server string, idCard openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idCard", runtime.ParamLocationPath, idCard)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardsIdCardRequest generates requests for GetCardsIdCard
func NewGetCardsIdCardRequest(server string, idCard openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idCard", runtime.ParamLocationPath, idCard)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCardsIdCardRequest calls the generic PutCardsIdCard builder with application/json body
func NewPutCardsIdCardRequest(server string, idCard openapi_types.UUID, body PutCardsIdCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCardsIdCardRequestWithBody(server, idCard, "application/json", bodyReader)
}

// NewPutCardsIdCardRequestWithBody generates requests for PutCardsIdCard with any type of body
func NewPutCardsIdCardRequestWithBody(server string, idCard openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idCard", runtime.ParamLocationPath, idCard)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostListsRequest calls the generic PostLists builder with application/json body
func NewPostListsRequest(server string, params *PostListsParams, body PostListsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostListsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostListsRequestWithBody generates requests for PostLists with any type of body
func NewPostListsRequestWithBody(server string, params *PostListsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idBoard", runtime.ParamLocationQuery, params.IdBoard); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteListsIdListRequest generates requests for DeleteListsIdList
func NewDeleteListsIdListRequest(server string, idList openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idList", runtime.ParamLocationPath, idList)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListsIdListRequest generates requests for GetListsIdList
func NewGetListsIdListRequest(server string, idList openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idList", runtime.ParamLocationPath, idList)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutListsIdListRequest calls the generic PutListsIdList builder with application/json body
func NewPutListsIdListRequest(server string, idList openapi_types.UUID, body PutListsIdListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutListsIdListRequestWithBody(server, idList, "application/json", bodyReader)
}

// NewPutListsIdListRequestWithBody generates requests for PutListsIdList with any type of body
func NewPutListsIdListRequestWithBody(server string, idList openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idList", runtime.ParamLocationPath, idList)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMembersBoardsIdBoardStarRequest generates requests for DeleteMembersBoardsIdBoardStar
func NewDeleteMembersBoardsIdBoardStarRequest(server string, idBoard openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idBoard", runtime.ParamLocationPath, idBoard)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/members/boards/%s/star", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMembersBoardsIdBoardStarRequest generates requests for PostMembersBoardsIdBoardStar
func NewPostMembersBoardsIdBoardStarRequest(server string, idBoard openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idBoard", runtime.ParamLocationPath, idBoard)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/members/boards/%s/star", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMembersBoardsNameBoardUniqueJoinRequest calls the generic PostMembersBoardsNameBoardUniqueJoin builder with application/json body
func NewPostMembersBoardsNameBoardUniqueJoinRequest(server string, nameBoardUnique string, body PostMembersBoardsNameBoardUniqueJoinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMembersBoardsNameBoardUniqueJoinRequestWithBody(server, nameBoardUnique, "application/json", bodyReader)
}

// NewPostMembersBoardsNameBoardUniqueJoinRequestWithBody generates requests for PostMembersBoardsNameBoardUniqueJoin with any type of body
func NewPostMembersBoardsNameBoardUniqueJoinRequestWithBody(server string, nameBoardUnique string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nameBoardUnique", runtime.ParamLocationPath, nameBoardUnique)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/members/boards/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMembersMeRequest generates requests for GetMembersMe
func NewGetMembersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/members/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMembersMeRequest calls the generic PutMembersMe builder with application/json body
func NewPutMembersMeRequest(server string, body PutMembersMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMembersMeRequestWithBody(server, "application/json", bodyReader)
}

// NewPutMembersMeRequestWithBody generates requests for PutMembersMe with any type of body
func NewPutMembersMeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/members/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthLoginWithBodyWithResponse request with any body
	PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	// PostAuthRefreshWithBodyWithResponse request with any body
	PostAuthRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRefreshResponse, error)

	PostAuthRefreshWithResponse(ctx context.Context, body PostAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRefreshResponse, error)

	// PostAuthRegisterWithBodyWithResponse request with any body
	PostAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error)

	PostAuthRegisterWithResponse(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error)

	// GetBoardsWithResponse request
	GetBoardsWithResponse(ctx context.Context, params *GetBoardsParams, reqEditors ...RequestEditorFn) (*GetBoardsResponse, error)

	// PostBoardsWithBodyWithResponse request with any body
	PostBoardsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBoardsResponse, error)

	PostBoardsWithResponse(ctx context.Context, body PostBoardsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBoardsResponse, error)

	// DeleteBoardsIdBoardWithResponse request
	DeleteBoardsIdBoardWithResponse(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteBoardsIdBoardResponse, error)

	// GetBoardsIdBoardWithResponse request
	GetBoardsIdBoardWithResponse(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetBoardsIdBoardResponse, error)

	// PutBoardsIdBoardWithBodyWithResponse request with any body
	PutBoardsIdBoardWithBodyWithResponse(ctx context.Context, idBoard openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBoardsIdBoardResponse, error)

	PutBoardsIdBoardWithResponse(ctx context.Context, idBoard openapi_types.UUID, body PutBoardsIdBoardJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBoardsIdBoardResponse, error)

	// DeleteBoardsIdBoardMembersIdMemberWithResponse request
	DeleteBoardsIdBoardMembersIdMemberWithResponse(ctx context.Context, idBoard openapi_types.UUID, idMember openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteBoardsIdBoardMembersIdMemberResponse, error)

	// PostCardsWithBodyWithResponse request with any body
	PostCardsWithBodyWithResponse(ctx context.Context, params *PostCardsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardsResponse, error)

	PostCardsWithResponse(ctx context.Context, params *PostCardsParams, body PostCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardsResponse, error)

	// DeleteCardsIdCardWithResponse request
	DeleteCardsIdCardWithResponse(ctx context.Context, idCard openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteCardsIdCardResponse, error)

	// GetCardsIdCardWithResponse request
	GetCardsIdCardWithResponse(ctx context.Context, idCard openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCardsIdCardResponse, error)

	// PutCardsIdCardWithBodyWithResponse request with any body
	PutCardsIdCardWithBodyWithResponse(ctx context.Context, idCard openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCardsIdCardResponse, error)

	PutCardsIdCardWithResponse(ctx context.Context, idCard openapi_types.UUID, body PutCardsIdCardJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCardsIdCardResponse, error)

	// PostListsWithBodyWithResponse request with any body
	PostListsWithBodyWithResponse(ctx context.Context, params *PostListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListsResponse, error)

	PostListsWithResponse(ctx context.Context, params *PostListsParams, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListsResponse, error)

	// DeleteListsIdListWithResponse request
	DeleteListsIdListWithResponse(ctx context.Context, idList openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteListsIdListResponse, error)

	// GetListsIdListWithResponse request
	GetListsIdListWithResponse(ctx context.Context, idList openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetListsIdListResponse, error)

	// PutListsIdListWithBodyWithResponse request with any body
	PutListsIdListWithBodyWithResponse(ctx context.Context, idList openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutListsIdListResponse, error)

	PutListsIdListWithResponse(ctx context.Context, idList openapi_types.UUID, body PutListsIdListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutListsIdListResponse, error)

	// DeleteMembersBoardsIdBoardStarWithResponse request
	DeleteMembersBoardsIdBoardStarWithResponse(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteMembersBoardsIdBoardStarResponse, error)

	// PostMembersBoardsIdBoardStarWithResponse request
	PostMembersBoardsIdBoardStarWithResponse(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostMembersBoardsIdBoardStarResponse, error)

	// PostMembersBoardsNameBoardUniqueJoinWithBodyWithResponse request with any body
	PostMembersBoardsNameBoardUniqueJoinWithBodyWithResponse(ctx context.Context, nameBoardUnique string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMembersBoardsNameBoardUniqueJoinResponse, error)

	PostMembersBoardsNameBoardUniqueJoinWithResponse(ctx context.Context, nameBoardUnique string, body PostMembersBoardsNameBoardUniqueJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMembersBoardsNameBoardUniqueJoinResponse, error)

	// GetMembersMeWithResponse request
	GetMembersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMembersMeResponse, error)

	// PutMembersMeWithBodyWithResponse request with any body
	PutMembersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMembersMeResponse, error)

	PutMembersMeWithResponse(ctx context.Context, body PutMembersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMembersMeResponse, error)
}

type PostAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenRefreshResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostAuthRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegisterResponse
	JSON400      *BadRequest
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PostAuthRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBoardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BoardsListResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GetBoardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBoardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBoardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BoardResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostBoardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBoardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBoardsIdBoardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteBoardsIdBoardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBoardsIdBoardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBoardsIdBoardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BoardWithDetailsResponse
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetBoardsIdBoardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBoardsIdBoardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBoardsIdBoardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BoardResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PutBoardsIdBoardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBoardsIdBoardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBoardsIdBoardMembersIdMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteBoardsIdBoardMembersIdMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBoardsIdBoardMembersIdMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CardResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostCardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCardsIdCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteCardsIdCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCardsIdCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardsIdCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardResponse
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetCardsIdCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardsIdCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCardsIdCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PutCardsIdCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCardsIdCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ListResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListsIdListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteListsIdListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListsIdListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsIdListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListWithCardsResponse
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetListsIdListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsIdListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutListsIdListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PutListsIdListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutListsIdListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMembersBoardsIdBoardStarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnstarBoardResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteMembersBoardsIdBoardStarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMembersBoardsIdBoardStarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMembersBoardsIdBoardStarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StarBoardResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PostMembersBoardsIdBoardStarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMembersBoardsIdBoardStarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMembersBoardsNameBoardUniqueJoinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JoinBoardResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Error
	JSON404      *NotFound
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PostMembersBoardsNameBoardUniqueJoinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMembersBoardsNameBoardUniqueJoinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMembersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemberResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GetMembersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMembersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMembersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemberResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PutMembersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMembersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthLoginWithBodyWithResponse request with arbitrary body returning *PostAuthLoginResponse
func (c *ClientWithResponses) PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

// PostAuthRefreshWithBodyWithResponse request with arbitrary body returning *PostAuthRefreshResponse
func (c *ClientWithResponses) PostAuthRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRefreshResponse, error) {
	rsp, err := c.PostAuthRefreshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRefreshResponse(rsp)
}

func (c *ClientWithResponses) PostAuthRefreshWithResponse(ctx context.Context, body PostAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRefreshResponse, error) {
	rsp, err := c.PostAuthRefresh(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRefreshResponse(rsp)
}

// PostAuthRegisterWithBodyWithResponse request with arbitrary body returning *PostAuthRegisterResponse
func (c *ClientWithResponses) PostAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error) {
	rsp, err := c.PostAuthRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostAuthRegisterWithResponse(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error) {
	rsp, err := c.PostAuthRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRegisterResponse(rsp)
}

// GetBoardsWithResponse request returning *GetBoardsResponse
func (c *ClientWithResponses) GetBoardsWithResponse(ctx context.Context, params *GetBoardsParams, reqEditors ...RequestEditorFn) (*GetBoardsResponse, error) {
	rsp, err := c.GetBoards(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBoardsResponse(rsp)
}

// PostBoardsWithBodyWithResponse request with arbitrary body returning *PostBoardsResponse
func (c *ClientWithResponses) PostBoardsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBoardsResponse, error) {
	rsp, err := c.PostBoardsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBoardsResponse(rsp)
}

func (c *ClientWithResponses) PostBoardsWithResponse(ctx context.Context, body PostBoardsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBoardsResponse, error) {
	rsp, err := c.PostBoards(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBoardsResponse(rsp)
}

// DeleteBoardsIdBoardWithResponse request returning *DeleteBoardsIdBoardResponse
func (c *ClientWithResponses) DeleteBoardsIdBoardWithResponse(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteBoardsIdBoardResponse, error) {
	rsp, err := c.DeleteBoardsIdBoard(ctx, idBoard, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBoardsIdBoardResponse(rsp)
}

// GetBoardsIdBoardWithResponse request returning *GetBoardsIdBoardResponse
func (c *ClientWithResponses) GetBoardsIdBoardWithResponse(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetBoardsIdBoardResponse, error) {
	rsp, err := c.GetBoardsIdBoard(ctx, idBoard, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBoardsIdBoardResponse(rsp)
}

// PutBoardsIdBoardWithBodyWithResponse request with arbitrary body returning *PutBoardsIdBoardResponse
func (c *ClientWithResponses) PutBoardsIdBoardWithBodyWithResponse(ctx context.Context, idBoard openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBoardsIdBoardResponse, error) {
	rsp, err := c.PutBoardsIdBoardWithBody(ctx, idBoard, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBoardsIdBoardResponse(rsp)
}

func (c *ClientWithResponses) PutBoardsIdBoardWithResponse(ctx context.Context, idBoard openapi_types.UUID, body PutBoardsIdBoardJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBoardsIdBoardResponse, error) {
	rsp, err := c.PutBoardsIdBoard(ctx, idBoard, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBoardsIdBoardResponse(rsp)
}

// DeleteBoardsIdBoardMembersIdMemberWithResponse request returning *DeleteBoardsIdBoardMembersIdMemberResponse
func (c *ClientWithResponses) DeleteBoardsIdBoardMembersIdMemberWithResponse(ctx context.Context, idBoard openapi_types.UUID, idMember openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteBoardsIdBoardMembersIdMemberResponse, error) {
	rsp, err := c.DeleteBoardsIdBoardMembersIdMember(ctx, idBoard, idMember, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBoardsIdBoardMembersIdMemberResponse(rsp)
}

// PostCardsWithBodyWithResponse request with arbitrary body returning *PostCardsResponse
func (c *ClientWithResponses) PostCardsWithBodyWithResponse(ctx context.Context, params *PostCardsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardsResponse, error) {
	rsp, err := c.PostCardsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardsResponse(rsp)
}

func (c *ClientWithResponses) PostCardsWithResponse(ctx context.Context, params *PostCardsParams, body PostCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardsResponse, error) {
	rsp, err := c.PostCards(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardsResponse(rsp)
}

// DeleteCardsIdCardWithResponse request returning *DeleteCardsIdCardResponse
func (c *ClientWithResponses) DeleteCardsIdCardWithResponse(ctx context.Context, idCard openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteCardsIdCardResponse, error) {
	rsp, err := c.DeleteCardsIdCard(ctx, idCard, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCardsIdCardResponse(rsp)
}

// GetCardsIdCardWithResponse request returning *GetCardsIdCardResponse
func (c *ClientWithResponses) GetCardsIdCardWithResponse(ctx context.Context, idCard openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCardsIdCardResponse, error) {
	rsp, err := c.GetCardsIdCard(ctx, idCard, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardsIdCardResponse(rsp)
}

// PutCardsIdCardWithBodyWithResponse request with arbitrary body returning *PutCardsIdCardResponse
func (c *ClientWithResponses) PutCardsIdCardWithBodyWithResponse(ctx context.Context, idCard openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCardsIdCardResponse, error) {
	rsp, err := c.PutCardsIdCardWithBody(ctx, idCard, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCardsIdCardResponse(rsp)
}

func (c *ClientWithResponses) PutCardsIdCardWithResponse(ctx context.Context, idCard openapi_types.UUID, body PutCardsIdCardJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCardsIdCardResponse, error) {
	rsp, err := c.PutCardsIdCard(ctx, idCard, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCardsIdCardResponse(rsp)
}

// PostListsWithBodyWithResponse request with arbitrary body returning *PostListsResponse
func (c *ClientWithResponses) PostListsWithBodyWithResponse(ctx context.Context, params *PostListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListsResponse, error) {
	rsp, err := c.PostListsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListsResponse(rsp)
}

func (c *ClientWithResponses) PostListsWithResponse(ctx context.Context, params *PostListsParams, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListsResponse, error) {
	rsp, err := c.PostLists(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListsResponse(rsp)
}

// DeleteListsIdListWithResponse request returning *DeleteListsIdListResponse
func (c *ClientWithResponses) DeleteListsIdListWithResponse(ctx context.Context, idList openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteListsIdListResponse, error) {
	rsp, err := c.DeleteListsIdList(ctx, idList, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListsIdListResponse(rsp)
}

// GetListsIdListWithResponse request returning *GetListsIdListResponse
func (c *ClientWithResponses) GetListsIdListWithResponse(ctx context.Context, idList openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetListsIdListResponse, error) {
	rsp, err := c.GetListsIdList(ctx, idList, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsIdListResponse(rsp)
}

// PutListsIdListWithBodyWithResponse request with arbitrary body returning *PutListsIdListResponse
func (c *ClientWithResponses) PutListsIdListWithBodyWithResponse(ctx context.Context, idList openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutListsIdListResponse, error) {
	rsp, err := c.PutListsIdListWithBody(ctx, idList, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutListsIdListResponse(rsp)
}

func (c *ClientWithResponses) PutListsIdListWithResponse(ctx context.Context, idList openapi_types.UUID, body PutListsIdListJSONRequestBody, reqEditors ...RequestEditorFn) (*PutListsIdListResponse, error) {
	rsp, err := c.PutListsIdList(ctx, idList, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutListsIdListResponse(rsp)
}

// DeleteMembersBoardsIdBoardStarWithResponse request returning *DeleteMembersBoardsIdBoardStarResponse
func (c *ClientWithResponses) DeleteMembersBoardsIdBoardStarWithResponse(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteMembersBoardsIdBoardStarResponse, error) {
	rsp, err := c.DeleteMembersBoardsIdBoardStar(ctx, idBoard, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMembersBoardsIdBoardStarResponse(rsp)
}

// PostMembersBoardsIdBoardStarWithResponse request returning *PostMembersBoardsIdBoardStarResponse
func (c *ClientWithResponses) PostMembersBoardsIdBoardStarWithResponse(ctx context.Context, idBoard openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostMembersBoardsIdBoardStarResponse, error) {
	rsp, err := c.PostMembersBoardsIdBoardStar(ctx, idBoard, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMembersBoardsIdBoardStarResponse(rsp)
}

// PostMembersBoardsNameBoardUniqueJoinWithBodyWithResponse request with arbitrary body returning *PostMembersBoardsNameBoardUniqueJoinResponse
func (c *ClientWithResponses) PostMembersBoardsNameBoardUniqueJoinWithBodyWithResponse(ctx context.Context, nameBoardUnique string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMembersBoardsNameBoardUniqueJoinResponse, error) {
	rsp, err := c.PostMembersBoardsNameBoardUniqueJoinWithBody(ctx, nameBoardUnique, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMembersBoardsNameBoardUniqueJoinResponse(rsp)
}

func (c *ClientWithResponses) PostMembersBoardsNameBoardUniqueJoinWithResponse(ctx context.Context, nameBoardUnique string, body PostMembersBoardsNameBoardUniqueJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMembersBoardsNameBoardUniqueJoinResponse, error) {
	rsp, err := c.PostMembersBoardsNameBoardUniqueJoin(ctx, nameBoardUnique, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMembersBoardsNameBoardUniqueJoinResponse(rsp)
}

// GetMembersMeWithResponse request returning *GetMembersMeResponse
func (c *ClientWithResponses) GetMembersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMembersMeResponse, error) {
	rsp, err := c.GetMembersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMembersMeResponse(rsp)
}

// PutMembersMeWithBodyWithResponse request with arbitrary body returning *PutMembersMeResponse
func (c *ClientWithResponses) PutMembersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMembersMeResponse, error) {
	rsp, err := c.PutMembersMeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMembersMeResponse(rsp)
}

func (c *ClientWithResponses) PutMembersMeWithResponse(ctx context.Context, body PutMembersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMembersMeResponse, error) {
	rsp, err := c.PutMembersMe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMembersMeResponse(rsp)
}

// ParsePostAuthLoginResponse parses an HTTP response from a PostAuthLoginWithResponse call
func ParsePostAuthLoginResponse(rsp *http.Response) (*PostAuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostAuthRefreshResponse parses an HTTP response from a PostAuthRefreshWithResponse call
func ParsePostAuthRefreshResponse(rsp *http.Response) (*PostAuthRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenRefreshResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostAuthRegisterResponse parses an HTTP response from a PostAuthRegisterWithResponse call
func ParsePostAuthRegisterResponse(rsp *http.Response) (*PostAuthRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegisterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetBoardsResponse parses an HTTP response from a GetBoardsWithResponse call
func ParseGetBoardsResponse(rsp *http.Response) (*GetBoardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBoardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BoardsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostBoardsResponse parses an HTTP response from a PostBoardsWithResponse call
func ParsePostBoardsResponse(rsp *http.Response) (*PostBoardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBoardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BoardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteBoardsIdBoardResponse parses an HTTP response from a DeleteBoardsIdBoardWithResponse call
func ParseDeleteBoardsIdBoardResponse(rsp *http.Response) (*DeleteBoardsIdBoardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBoardsIdBoardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBoardsIdBoardResponse parses an HTTP response from a GetBoardsIdBoardWithResponse call
func ParseGetBoardsIdBoardResponse(rsp *http.Response) (*GetBoardsIdBoardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBoardsIdBoardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BoardWithDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutBoardsIdBoardResponse parses an HTTP response from a PutBoardsIdBoardWithResponse call
func ParsePutBoardsIdBoardResponse(rsp *http.Response) (*PutBoardsIdBoardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBoardsIdBoardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BoardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteBoardsIdBoardMembersIdMemberResponse parses an HTTP response from a DeleteBoardsIdBoardMembersIdMemberWithResponse call
func ParseDeleteBoardsIdBoardMembersIdMemberResponse(rsp *http.Response) (*DeleteBoardsIdBoardMembersIdMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBoardsIdBoardMembersIdMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCardsResponse parses an HTTP response from a PostCardsWithResponse call
func ParsePostCardsResponse(rsp *http.Response) (*PostCardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteCardsIdCardResponse parses an HTTP response from a DeleteCardsIdCardWithResponse call
func ParseDeleteCardsIdCardResponse(rsp *http.Response) (*DeleteCardsIdCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCardsIdCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCardsIdCardResponse parses an HTTP response from a GetCardsIdCardWithResponse call
func ParseGetCardsIdCardResponse(rsp *http.Response) (*GetCardsIdCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardsIdCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutCardsIdCardResponse parses an HTTP response from a PutCardsIdCardWithResponse call
func ParsePutCardsIdCardResponse(rsp *http.Response) (*PutCardsIdCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCardsIdCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostListsResponse parses an HTTP response from a PostListsWithResponse call
func ParsePostListsResponse(rsp *http.Response) (*PostListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteListsIdListResponse parses an HTTP response from a DeleteListsIdListWithResponse call
func ParseDeleteListsIdListResponse(rsp *http.Response) (*DeleteListsIdListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListsIdListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetListsIdListResponse parses an HTTP response from a GetListsIdListWithResponse call
func ParseGetListsIdListResponse(rsp *http.Response) (*GetListsIdListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsIdListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListWithCardsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutListsIdListResponse parses an HTTP response from a PutListsIdListWithResponse call
func ParsePutListsIdListResponse(rsp *http.Response) (*PutListsIdListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutListsIdListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteMembersBoardsIdBoardStarResponse parses an HTTP response from a DeleteMembersBoardsIdBoardStarWithResponse call
func ParseDeleteMembersBoardsIdBoardStarResponse(rsp *http.Response) (*DeleteMembersBoardsIdBoardStarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMembersBoardsIdBoardStarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnstarBoardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostMembersBoardsIdBoardStarResponse parses an HTTP response from a PostMembersBoardsIdBoardStarWithResponse call
func ParsePostMembersBoardsIdBoardStarResponse(rsp *http.Response) (*PostMembersBoardsIdBoardStarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMembersBoardsIdBoardStarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StarBoardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostMembersBoardsNameBoardUniqueJoinResponse parses an HTTP response from a PostMembersBoardsNameBoardUniqueJoinWithResponse call
func ParsePostMembersBoardsNameBoardUniqueJoinResponse(rsp *http.Response) (*PostMembersBoardsNameBoardUniqueJoinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMembersBoardsNameBoardUniqueJoinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JoinBoardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetMembersMeResponse parses an HTTP response from a GetMembersMeWithResponse call
func ParseGetMembersMeResponse(rsp *http.Response) (*GetMembersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMembersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemberResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePutMembersMeResponse parses an HTTP response from a PutMembersMeWithResponse call
func ParsePutMembersMeResponse(rsp *http.Response) (*PutMembersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMembersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemberResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user
	// (POST /auth/login)
	PostAuthLogin(w http.ResponseWriter, r *http.Request)
	// Refresh access token
	// (POST /auth/refresh)
	PostAuthRefresh(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(w http.ResponseWriter, r *http.Request)
	// Get all boards of current member
	// (GET /boards)
	GetBoards(w http.ResponseWriter, r *http.Request, params GetBoardsParams)
	// Create a new board
	// (POST /boards)
	PostBoards(w http.ResponseWriter, r *http.Request)
	// Delete board
	// (DELETE /boards/{idBoard})
	DeleteBoardsIdBoard(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID)
	// Get board with lists
	// (GET /boards/{idBoard})
	GetBoardsIdBoard(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID)
	// Update board
	// (PUT /boards/{idBoard})
	PutBoardsIdBoard(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID)
	// Remove member from board (or leave from board if not an owner)
	// (DELETE /boards/{idBoard}/members/{idMember})
	DeleteBoardsIdBoardMembersIdMember(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID, idMember openapi_types.UUID)
	// Create a new card
	// (POST /cards)
	PostCards(w http.ResponseWriter, r *http.Request, params PostCardsParams)
	// Delete card
	// (DELETE /cards/{idCard})
	DeleteCardsIdCard(w http.ResponseWriter, r *http.Request, idCard openapi_types.UUID)
	// Get card with full info
	// (GET /cards/{idCard})
	GetCardsIdCard(w http.ResponseWriter, r *http.Request, idCard openapi_types.UUID)
	// Update card
	// (PUT /cards/{idCard})
	PutCardsIdCard(w http.ResponseWriter, r *http.Request, idCard openapi_types.UUID)
	// Create a new list
	// (POST /lists)
	PostLists(w http.ResponseWriter, r *http.Request, params PostListsParams)
	// Delete list
	// (DELETE /lists/{idList})
	DeleteListsIdList(w http.ResponseWriter, r *http.Request, idList openapi_types.UUID)
	// Get list with cards
	// (GET /lists/{idList})
	GetListsIdList(w http.ResponseWriter, r *http.Request, idList openapi_types.UUID)
	// Update list
	// (PUT /lists/{idList})
	PutListsIdList(w http.ResponseWriter, r *http.Request, idList openapi_types.UUID)
	// Unstar a board
	// (DELETE /members/boards/{idBoard}/star)
	DeleteMembersBoardsIdBoardStar(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID)
	// Star a board
	// (POST /members/boards/{idBoard}/star)
	PostMembersBoardsIdBoardStar(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID)
	// Join a board
	// (POST /members/boards/{nameBoardUnique}/join)
	PostMembersBoardsNameBoardUniqueJoin(w http.ResponseWriter, r *http.Request, nameBoardUnique string)
	// Get current user info
	// (GET /members/me)
	GetMembersMe(w http.ResponseWriter, r *http.Request)
	// Update current user info
	// (PUT /members/me)
	PutMembersMe(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Login user
// (POST /auth/login)
func (_ Unimplemented) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh access token
// (POST /auth/refresh)
func (_ Unimplemented) PostAuthRefresh(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new user
// (POST /auth/register)
func (_ Unimplemented) PostAuthRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all boards of current member
// (GET /boards)
func (_ Unimplemented) GetBoards(w http.ResponseWriter, r *http.Request, params GetBoardsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new board
// (POST /boards)
func (_ Unimplemented) PostBoards(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete board
// (DELETE /boards/{idBoard})
func (_ Unimplemented) DeleteBoardsIdBoard(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get board with lists
// (GET /boards/{idBoard})
func (_ Unimplemented) GetBoardsIdBoard(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update board
// (PUT /boards/{idBoard})
func (_ Unimplemented) PutBoardsIdBoard(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove member from board (or leave from board if not an owner)
// (DELETE /boards/{idBoard}/members/{idMember})
func (_ Unimplemented) DeleteBoardsIdBoardMembersIdMember(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID, idMember openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new card
// (POST /cards)
func (_ Unimplemented) PostCards(w http.ResponseWriter, r *http.Request, params PostCardsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete card
// (DELETE /cards/{idCard})
func (_ Unimplemented) DeleteCardsIdCard(w http.ResponseWriter, r *http.Request, idCard openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get card with full info
// (GET /cards/{idCard})
func (_ Unimplemented) GetCardsIdCard(w http.ResponseWriter, r *http.Request, idCard openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update card
// (PUT /cards/{idCard})
func (_ Unimplemented) PutCardsIdCard(w http.ResponseWriter, r *http.Request, idCard openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new list
// (POST /lists)
func (_ Unimplemented) PostLists(w http.ResponseWriter, r *http.Request, params PostListsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete list
// (DELETE /lists/{idList})
func (_ Unimplemented) DeleteListsIdList(w http.ResponseWriter, r *http.Request, idList openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list with cards
// (GET /lists/{idList})
func (_ Unimplemented) GetListsIdList(w http.ResponseWriter, r *http.Request, idList openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update list
// (PUT /lists/{idList})
func (_ Unimplemented) PutListsIdList(w http.ResponseWriter, r *http.Request, idList openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unstar a board
// (DELETE /members/boards/{idBoard}/star)
func (_ Unimplemented) DeleteMembersBoardsIdBoardStar(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Star a board
// (POST /members/boards/{idBoard}/star)
func (_ Unimplemented) PostMembersBoardsIdBoardStar(w http.ResponseWriter, r *http.Request, idBoard openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Join a board
// (POST /members/boards/{nameBoardUnique}/join)
func (_ Unimplemented) PostMembersBoardsNameBoardUniqueJoin(w http.ResponseWriter, r *http.Request, nameBoardUnique string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current user info
// (GET /members/me)
func (_ Unimplemented) GetMembersMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update current user info
// (PUT /members/me)
func (_ Unimplemented) PutMembersMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefresh(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBoards operation middleware
func (siw *ServerInterfaceWrapper) GetBoards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBoardsParams

	// ------------- Optional query parameter "starred" -------------

	err = runtime.BindQueryParameter("form", true, false, "starred", r.URL.Query(), &params.Starred)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "starred", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBoards(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostBoards operation middleware
func (siw *ServerInterfaceWrapper) PostBoards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBoards(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBoardsIdBoard operation middleware
func (siw *ServerInterfaceWrapper) DeleteBoardsIdBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idBoard" -------------
	var idBoard openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idBoard", chi.URLParam(r, "idBoard"), &idBoard, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idBoard", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBoardsIdBoard(w, r, idBoard)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBoardsIdBoard operation middleware
func (siw *ServerInterfaceWrapper) GetBoardsIdBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idBoard" -------------
	var idBoard openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idBoard", chi.URLParam(r, "idBoard"), &idBoard, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idBoard", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBoardsIdBoard(w, r, idBoard)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutBoardsIdBoard operation middleware
func (siw *ServerInterfaceWrapper) PutBoardsIdBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idBoard" -------------
	var idBoard openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idBoard", chi.URLParam(r, "idBoard"), &idBoard, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idBoard", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutBoardsIdBoard(w, r, idBoard)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBoardsIdBoardMembersIdMember operation middleware
func (siw *ServerInterfaceWrapper) DeleteBoardsIdBoardMembersIdMember(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idBoard" -------------
	var idBoard openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idBoard", chi.URLParam(r, "idBoard"), &idBoard, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idBoard", Err: err})
		return
	}

	// ------------- Path parameter "idMember" -------------
	var idMember openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idMember", chi.URLParam(r, "idMember"), &idMember, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idMember", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBoardsIdBoardMembersIdMember(w, r, idBoard, idMember)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCards operation middleware
func (siw *ServerInterfaceWrapper) PostCards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCardsParams

	// ------------- Required query parameter "idList" -------------

	if paramValue := r.URL.Query().Get("idList"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "idList"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "idList", r.URL.Query(), &params.IdList)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idList", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCards(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCardsIdCard operation middleware
func (siw *ServerInterfaceWrapper) DeleteCardsIdCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idCard" -------------
	var idCard openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idCard", chi.URLParam(r, "idCard"), &idCard, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idCard", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCardsIdCard(w, r, idCard)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCardsIdCard operation middleware
func (siw *ServerInterfaceWrapper) GetCardsIdCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idCard" -------------
	var idCard openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idCard", chi.URLParam(r, "idCard"), &idCard, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idCard", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCardsIdCard(w, r, idCard)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutCardsIdCard operation middleware
func (siw *ServerInterfaceWrapper) PutCardsIdCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idCard" -------------
	var idCard openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idCard", chi.URLParam(r, "idCard"), &idCard, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idCard", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutCardsIdCard(w, r, idCard)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostLists operation middleware
func (siw *ServerInterfaceWrapper) PostLists(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostListsParams

	// ------------- Required query parameter "idBoard" -------------

	if paramValue := r.URL.Query().Get("idBoard"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "idBoard"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "idBoard", r.URL.Query(), &params.IdBoard)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idBoard", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLists(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteListsIdList operation middleware
func (siw *ServerInterfaceWrapper) DeleteListsIdList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idList" -------------
	var idList openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idList", chi.URLParam(r, "idList"), &idList, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idList", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteListsIdList(w, r, idList)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetListsIdList operation middleware
func (siw *ServerInterfaceWrapper) GetListsIdList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idList" -------------
	var idList openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idList", chi.URLParam(r, "idList"), &idList, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idList", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetListsIdList(w, r, idList)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutListsIdList operation middleware
func (siw *ServerInterfaceWrapper) PutListsIdList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idList" -------------
	var idList openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idList", chi.URLParam(r, "idList"), &idList, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idList", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutListsIdList(w, r, idList)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMembersBoardsIdBoardStar operation middleware
func (siw *ServerInterfaceWrapper) DeleteMembersBoardsIdBoardStar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idBoard" -------------
	var idBoard openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idBoard", chi.URLParam(r, "idBoard"), &idBoard, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idBoard", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMembersBoardsIdBoardStar(w, r, idBoard)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostMembersBoardsIdBoardStar operation middleware
func (siw *ServerInterfaceWrapper) PostMembersBoardsIdBoardStar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "idBoard" -------------
	var idBoard openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "idBoard", chi.URLParam(r, "idBoard"), &idBoard, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "idBoard", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMembersBoardsIdBoardStar(w, r, idBoard)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostMembersBoardsNameBoardUniqueJoin operation middleware
func (siw *ServerInterfaceWrapper) PostMembersBoardsNameBoardUniqueJoin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "nameBoardUnique" -------------
	var nameBoardUnique string

	err = runtime.BindStyledParameterWithOptions("simple", "nameBoardUnique", chi.URLParam(r, "nameBoardUnique"), &nameBoardUnique, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nameBoardUnique", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMembersBoardsNameBoardUniqueJoin(w, r, nameBoardUnique)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMembersMe operation middleware
func (siw *ServerInterfaceWrapper) GetMembersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMembersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutMembersMe operation middleware
func (siw *ServerInterfaceWrapper) PutMembersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutMembersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh", wrapper.PostAuthRefresh)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards", wrapper.GetBoards)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/boards", wrapper.PostBoards)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/boards/{idBoard}", wrapper.DeleteBoardsIdBoard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards/{idBoard}", wrapper.GetBoardsIdBoard)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/boards/{idBoard}", wrapper.PutBoardsIdBoard)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/boards/{idBoard}/members/{idMember}", wrapper.DeleteBoardsIdBoardMembersIdMember)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cards", wrapper.PostCards)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/cards/{idCard}", wrapper.DeleteCardsIdCard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cards/{idCard}", wrapper.GetCardsIdCard)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/cards/{idCard}", wrapper.PutCardsIdCard)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/lists", wrapper.PostLists)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/lists/{idList}", wrapper.DeleteListsIdList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/lists/{idList}", wrapper.GetListsIdList)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/lists/{idList}", wrapper.PutListsIdList)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/members/boards/{idBoard}/star", wrapper.DeleteMembersBoardsIdBoardStar)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/members/boards/{idBoard}/star", wrapper.PostMembersBoardsIdBoardStar)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/members/boards/{nameBoardUnique}/join", wrapper.PostMembersBoardsNameBoardUniqueJoin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/members/me", wrapper.GetMembersMe)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/members/me", wrapper.PutMembersMe)
	})

	return r
}
